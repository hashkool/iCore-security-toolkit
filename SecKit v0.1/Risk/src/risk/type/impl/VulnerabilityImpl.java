/**
 */
package risk.type.impl;

import java.util.Collection;

import models.impl.ElementImpl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import risk.type.Countermeasure;
import risk.type.TypePackage;
import risk.type.Vulnerability;

import structure.instantiation.EntityInstantiationReference;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Vulnerability</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link risk.type.impl.VulnerabilityImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link risk.type.impl.VulnerabilityImpl#getCountermeasures <em>Countermeasures</em>}</li>
 *   <li>{@link risk.type.impl.VulnerabilityImpl#getEntityInstantiation <em>Entity Instantiation</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class VulnerabilityImpl extends ElementImpl implements Vulnerability {
    /**
     * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getDescription()
     * @generated
     * @ordered
     */
    protected static final String DESCRIPTION_EDEFAULT = null;

    /**
     * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getDescription()
     * @generated
     * @ordered
     */
    protected String description = DESCRIPTION_EDEFAULT;

    /**
     * The cached value of the '{@link #getCountermeasures() <em>Countermeasures</em>}' reference list.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getCountermeasures()
     * @generated
     * @ordered
     */
    protected EList<Countermeasure> countermeasures;

    /**
     * The cached value of the '{@link #getEntityInstantiation() <em>Entity Instantiation</em>}' reference.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #getEntityInstantiation()
     * @generated
     * @ordered
     */
    protected EntityInstantiationReference entityInstantiation;

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected VulnerabilityImpl() {
        super();
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected EClass eStaticClass() {
        return TypePackage.Literals.VULNERABILITY;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public String getDescription() {
        return description;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setDescription(String newDescription) {
        String oldDescription = description;
        description = newDescription;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, TypePackage.VULNERABILITY__DESCRIPTION, oldDescription, description));
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EList<Countermeasure> getCountermeasures() {
        if (countermeasures == null) {
            countermeasures = new EObjectResolvingEList<Countermeasure>(Countermeasure.class, this, TypePackage.VULNERABILITY__COUNTERMEASURES);
        }
        return countermeasures;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EntityInstantiationReference getEntityInstantiation() {
        if (entityInstantiation != null && entityInstantiation.eIsProxy()) {
            InternalEObject oldEntityInstantiation = (InternalEObject)entityInstantiation;
            entityInstantiation = (EntityInstantiationReference)eResolveProxy(oldEntityInstantiation);
            if (entityInstantiation != oldEntityInstantiation) {
                if (eNotificationRequired())
                    eNotify(new ENotificationImpl(this, Notification.RESOLVE, TypePackage.VULNERABILITY__ENTITY_INSTANTIATION, oldEntityInstantiation, entityInstantiation));
            }
        }
        return entityInstantiation;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public EntityInstantiationReference basicGetEntityInstantiation() {
        return entityInstantiation;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setEntityInstantiation(EntityInstantiationReference newEntityInstantiation) {
        EntityInstantiationReference oldEntityInstantiation = entityInstantiation;
        entityInstantiation = newEntityInstantiation;
        if (eNotificationRequired())
            eNotify(new ENotificationImpl(this, Notification.SET, TypePackage.VULNERABILITY__ENTITY_INSTANTIATION, oldEntityInstantiation, entityInstantiation));
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object eGet(int featureID, boolean resolve, boolean coreType) {
        switch (featureID) {
            case TypePackage.VULNERABILITY__DESCRIPTION:
                return getDescription();
            case TypePackage.VULNERABILITY__COUNTERMEASURES:
                return getCountermeasures();
            case TypePackage.VULNERABILITY__ENTITY_INSTANTIATION:
                if (resolve) return getEntityInstantiation();
                return basicGetEntityInstantiation();
        }
        return super.eGet(featureID, resolve, coreType);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @SuppressWarnings("unchecked")
    @Override
    public void eSet(int featureID, Object newValue) {
        switch (featureID) {
            case TypePackage.VULNERABILITY__DESCRIPTION:
                setDescription((String)newValue);
                return;
            case TypePackage.VULNERABILITY__COUNTERMEASURES:
                getCountermeasures().clear();
                getCountermeasures().addAll((Collection<? extends Countermeasure>)newValue);
                return;
            case TypePackage.VULNERABILITY__ENTITY_INSTANTIATION:
                setEntityInstantiation((EntityInstantiationReference)newValue);
                return;
        }
        super.eSet(featureID, newValue);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public void eUnset(int featureID) {
        switch (featureID) {
            case TypePackage.VULNERABILITY__DESCRIPTION:
                setDescription(DESCRIPTION_EDEFAULT);
                return;
            case TypePackage.VULNERABILITY__COUNTERMEASURES:
                getCountermeasures().clear();
                return;
            case TypePackage.VULNERABILITY__ENTITY_INSTANTIATION:
                setEntityInstantiation((EntityInstantiationReference)null);
                return;
        }
        super.eUnset(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean eIsSet(int featureID) {
        switch (featureID) {
            case TypePackage.VULNERABILITY__DESCRIPTION:
                return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
            case TypePackage.VULNERABILITY__COUNTERMEASURES:
                return countermeasures != null && !countermeasures.isEmpty();
            case TypePackage.VULNERABILITY__ENTITY_INSTANTIATION:
                return entityInstantiation != null;
        }
        return super.eIsSet(featureID);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public String toString() {
        if (eIsProxy()) return super.toString();

        StringBuffer result = new StringBuffer(super.toString());
        result.append(" (description: ");
        result.append(description);
        result.append(')');
        return result.toString();
    }

} //VulnerabilityImpl
